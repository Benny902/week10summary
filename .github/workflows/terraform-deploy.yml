name: Terraform Azure Deployment

on:
  workflow_call:
    inputs:
      storage-account-name:
        required: true
        type: string
      key:
        required: true
        type: string
      environment:
        required: true
        type: string
    secrets:
      AZURE_CREDENTIALS:
        required: true
      VM_SSH_KEY:
        required: true

jobs:
  deploy:
    name: Provision Azure Infrastructure with Terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Write SSH Private Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Derive SSH Public Key
        id: ssh
        run: |
          ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
          echo "ssh_public_key=$(cat ~/.ssh/id_rsa.pub)" >> "$GITHUB_OUTPUT"

      - name: Set Terraform Azure credentials
        run: |
          echo '${{ secrets.AZURE_CREDENTIALS }}' > sp.json
          echo "ARM_CLIENT_ID=$(jq -r .clientId sp.json)" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$(jq -r .clientSecret sp.json)" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$(jq -r .subscriptionId sp.json)" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$(jq -r .tenantId sp.json)" >> $GITHUB_ENV

      - name: Load Environment Variables
        run: |
          cp "./env/${{ inputs.environment }}.env" .env
          echo "Loaded env/${{ inputs.environment }}.env"
          cat .env >> $GITHUB_ENV

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ inputs.storage-account-name }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=${{ inputs.key }}" \
            -backend-config="resource_group_name=tfstate-backend-rg"

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="ssh_public_key=${{ steps.ssh.outputs.ssh_public_key }}"
        env:
          TF_VAR_rg_name: ${{ env.rg_name }}

      - name: Await Manual Approval Before Apply
        uses: hmarr/auto-approve-action@v3
        if: github.event_name == 'workflow_dispatch'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform Apply (Manual)
        run: |
          terraform apply \
            -var="ssh_public_key=${{ steps.ssh.outputs.ssh_public_key }}"
        env:
          TF_VAR_rg_name: ${{ env.rg_name }}

      - name: Output Public IP
        run: terraform output public_ip_address
